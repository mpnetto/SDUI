[1mdiff --git a/app/src/main/java/com/sacada/sdui/test/TestPayLoad.kt b/app/src/main/java/com/sacada/sdui/test/TestPayLoad.kt[m
[1mindex ff696f2..5ab01de 100644[m
[1m--- a/app/src/main/java/com/sacada/sdui/test/TestPayLoad.kt[m
[1m+++ b/app/src/main/java/com/sacada/sdui/test/TestPayLoad.kt[m
[36m@@ -99,7 +99,10 @@[m [mval samplePayload = """[m
                         "type": "Text",[m
                         "attributes": {[m
                             "content": "What are you interested in?",[m
[31m-                            "style": "titleLarge"[m
[32m+[m[32m                            "style": {[m
[32m+[m[32m                                "type": "titleLarge",[m
[32m+[m[32m                                "color": "black"[m
[32m+[m[32m                            }[m
                         }[m
                     },[m
                     {[m
[36m@@ -107,8 +110,22 @@[m [mval samplePayload = """[m
                         "type": "Text",[m
                         "attributes": {[m
                             "content": "Updates from interests you follow will appear here. Follow some things to get started.",[m
[31m-                            "style": "bodyMedium",[m
[31m-                            "padding": "12"[m
[32m+[m[32m                            "style": {[m
[32m+[m[32m                                "type": "bodyMedium",[m
[32m+[m[32m                                "padding": "12"[m
[32m+[m[32m                            }[m
[32m+[m[32m                        }[m
[32m+[m[32m                    },[m
[32m+[m[32m                    {[m
[32m+[m[32m                        "id": "usernameField",[m
[32m+[m[32m                        "type": "TextField",[m
[32m+[m[32m                        "attributes": {[m
[32m+[m[32m                            "placeholder": "Enter your username",[m
[32m+[m[32m                            "validation": {[m
[32m+[m[32m                                "required": true,[m
[32m+[m[32m                                "minLength": 5,[m
[32m+[m[32m                                "regex": "^[a-zA-Z0-9_]*${'$'}"[m
[32m+[m[32m                            }[m
                         }[m
                     }[m
                 ][m
[36m@@ -125,7 +142,11 @@[m [mval samplePayload = """[m
                         "id": "buttonConfirm",[m
                         "type": "Button",[m
                         "attributes": {[m
[31m-                            "text": "Confirmar"[m
[32m+[m[32m                            "text": "Confirmar",[m
[32m+[m[32m                            "style": {[m
[32m+[m[32m                                "color": "green",[m
[32m+[m[32m                                "fontWeight": "bold"[m
[32m+[m[32m                            }[m
                         },[m
                         "action": {[m
                             "type": "event",[m
[36m@@ -136,7 +157,11 @@[m [mval samplePayload = """[m
                         "id": "buttonCancel",[m
                         "type": "Button",[m
                         "attributes": {[m
[31m-                            "text": "Cancelar"[m
[32m+[m[32m                            "text": "Cancelar",[m
[32m+[m[32m                            "style": {[m
[32m+[m[32m                                "color": "red",[m
[32m+[m[32m                                "fontWeight": "regular"[m
[32m+[m[32m                            }[m
                         },[m
                         "action": {[m
                             "type": "event",[m
[1mdiff --git a/core/src/main/java/com/sacada/core/model/ViewComponent.kt b/core/src/main/java/com/sacada/core/model/ViewComponent.kt[m
[1mindex 83b1bf1..5c9f97e 100644[m
[1m--- a/core/src/main/java/com/sacada/core/model/ViewComponent.kt[m
[1m+++ b/core/src/main/java/com/sacada/core/model/ViewComponent.kt[m
[36m@@ -4,7 +4,7 @@[m [mimport kotlinx.serialization.json.JsonElement[m
 [m
 @Serializable[m
 data class ViewComponent([m
[31m-    val id: String? = null,[m
[32m+[m[32m    val id: String = "",[m
     val type: String,[m
     val attributes: Map<String, JsonElement> = emptyMap(),[m
     val action: Action? = null,[m
[1mdiff --git a/core/src/main/java/com/sacada/core/util/Extensions.kt b/core/src/main/java/com/sacada/core/util/Extensions.kt[m
[1mindex 071aa1c..f6e5f98 100644[m
[1m--- a/core/src/main/java/com/sacada/core/util/Extensions.kt[m
[1m+++ b/core/src/main/java/com/sacada/core/util/Extensions.kt[m
[36m@@ -1,8 +1,13 @@[m
 package com.sacada.core.util[m
 [m
 import ViewComponent[m
[32m+[m[32mimport kotlinx.serialization.json.JsonElement[m
 import kotlinx.serialization.json.JsonPrimitive[m
[32m+[m[32mimport kotlinx.serialization.json.booleanOrNull[m
 import kotlinx.serialization.json.contentOrNull[m
[32m+[m[32mimport kotlinx.serialization.json.intOrNull[m
[32m+[m[32mimport kotlinx.serialization.json.jsonObject[m
[32m+[m[32mimport kotlinx.serialization.json.jsonPrimitive[m
 [m
 fun ViewComponent.getStringAttribute(key: String): String {[m
     return attributes[key]?.let {[m
[36m@@ -10,3 +15,22 @@[m [mfun ViewComponent.getStringAttribute(key: String): String {[m
         else it.toString()[m
     }?: ""[m
 }[m
[32m+[m
[32m+[m[32mfun ViewComponent.getSubAttributes(key: String): Map<String, JsonElement>? {[m
[32m+[m[32m    return attributes[key]?.jsonObject?.toMap()[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfun ViewComponent.isValid(value: String): Boolean {[m
[32m+[m[32m    val validationAttributes = this.getSubAttributes("validation") ?: return true[m
[32m+[m
[32m+[m[32m    val isRequired = validationAttributes["required"]?.jsonPrimitive?.booleanOrNull ?: false[m
[32m+[m[32m    if(isRequired && value.isBlank()) return false[m
[32m+[m
[32m+[m[32m    val minLength = validationAttributes["minLength"]?.jsonPrimitive?.intOrNull[m
[32m+[m[32m    if(minLength != null && value.length < minLength) return false[m
[32m+[m
[32m+[m[32m    val regex = validationAttributes["regex"]?.jsonPrimitive?.contentOrNull[m
[32m+[m[32m    if(regex != null && !Regex(regex).matches(value)) return false[m
[32m+[m
[32m+[m[32m    return true[m
[32m+[m[32m}[m
[1mdiff --git a/ui/src/main/java/com/sacada/ui/ui/renderers/RenderComponent.kt b/ui/src/main/java/com/sacada/ui/ui/renderers/RenderComponent.kt[m
[1mindex c0cc1df..3e52299 100644[m
[1m--- a/ui/src/main/java/com/sacada/ui/ui/renderers/RenderComponent.kt[m
[1m+++ b/ui/src/main/java/com/sacada/ui/ui/renderers/RenderComponent.kt[m
[36m@@ -3,6 +3,7 @@[m [mpackage com.sacada.ui.ui.renderers[m
 import ViewComponent[m
 import androidx.compose.material3.Text[m
 import androidx.compose.runtime.Composable[m
[32m+[m[32mimport com.sacada.ui.ui.screen.ScreenViewModel[m
 [m
 @Composable[m
 fun RenderComponent(component: ViewComponent) {[m
[1mdiff --git a/ui/src/main/java/com/sacada/ui/ui/renderers/RenderFloatingActionButton.kt b/ui/src/main/java/com/sacada/ui/ui/renderers/RenderFloatingActionButton.kt[m
[1mindex cd07f71..247d195 100644[m
[1m--- a/ui/src/main/java/com/sacada/ui/ui/renderers/RenderFloatingActionButton.kt[m
[1m+++ b/ui/src/main/java/com/sacada/ui/ui/renderers/RenderFloatingActionButton.kt[m
[36m@@ -5,10 +5,13 @@[m [mimport androidx.compose.material3.FloatingActionButton[m
 import androidx.compose.material3.Icon[m
 import androidx.compose.material3.MaterialTheme[m
 import androidx.compose.runtime.Composable[m
[32m+[m[32mimport androidx.compose.runtime.collectAsState[m
[32m+[m[32mimport androidx.compose.runtime.getValue[m
 import androidx.compose.runtime.remember[m
 import androidx.compose.ui.tooling.preview.Preview[m
 import com.sacada.core.model.handleAction[m
 import com.sacada.core.util.getStringAttribute[m
[32m+[m[32mimport com.sacada.ui.ui.screen.LocalScreenViewModel[m
 import com.sacada.ui.util.getIconResource[m
 import kotlinx.serialization.json.JsonPrimitive[m
 [m
[36m@@ -16,12 +19,17 @@[m [mimport kotlinx.serialization.json.JsonPrimitive[m
 @Composable[m
 fun RenderFloatingActionButton(component: ViewComponent) {[m
 [m
[32m+[m[32m    val viewModel = LocalScreenViewModel.current[m
[32m+[m[32m    val allComponentsValid by viewModel.areAllComponentsValid.collectAsState()[m
[32m+[m
     val iconName = remember { component.getStringAttribute("iconName") }[m
     val contentDescription = remember { component.getStringAttribute("contentDescription") }[m
 [m
     FloatingActionButton([m
         onClick = {[m
[31m-            component.action?.let { handleAction(it) }[m
[32m+[m[32m            if (allComponentsValid) {[m
[32m+[m[32m                component.action?.let { handleAction(it) }[m
[32m+[m[32m            }[m
         },[m
         containerColor = MaterialTheme.colorScheme.primary,[m
         contentColor = MaterialTheme.colorScheme.onPrimary,[m
[1mdiff --git a/ui/src/main/java/com/sacada/ui/ui/renderers/RenderText.kt b/ui/src/main/java/com/sacada/ui/ui/renderers/RenderText.kt[m
[1mindex 0169208..8e76642 100644[m
[1m--- a/ui/src/main/java/com/sacada/ui/ui/renderers/RenderText.kt[m
[1m+++ b/ui/src/main/java/com/sacada/ui/ui/renderers/RenderText.kt[m
[36m@@ -13,16 +13,16 @@[m [mimport androidx.compose.ui.unit.dp[m
 import com.sacada.core.util.getStringAttribute[m
 import com.sacada.ui.util.getPadding[m
 import com.sacada.ui.util.getTextStyle[m
[31m-import kotlinx.serialization.json.JsonPrimitive[m
[32m+[m[32mimport com.sacada.ui.util.parseJson[m
 [m
 @Composable[m
 fun RenderText(component: ViewComponent) {[m
[31m-    val style = component.getTextStyle()[m
[32m+[m[32m    val textStyle = component.getTextStyle()[m
     val padding = remember { component.getPadding() }[m
 [m
     Text([m
         text = component.getStringAttribute("content"),[m
[31m-        style = style,[m
[32m+[m[32m        style = textStyle,[m
         modifier = Modifier.padding(0.dp, padding),[m
         textAlign = TextAlign.Center[m
     )[m
[36m@@ -31,13 +31,19 @@[m [mfun RenderText(component: ViewComponent) {[m
 @Preview(showBackground = true, widthDp = 200)[m
 @Composable[m
 fun PreviewRenderText() {[m
[31m-    val testComponent = ViewComponent([m
[31m-        type = "Text",[m
[31m-        attributes = mapOf([m
[31m-            "content" to JsonPrimitive("Olá, este é um texto de exemplo!"),[m
[31m-            "style" to JsonPrimitive("title")[m
[31m-        )[m
[31m-    )[m
[32m+[m[32m    val testComponent = """[m
[32m+[m[32m        {[m
[32m+[m[32m            "id": "text1",[m
[32m+[m[32m            "type": "Text",[m
[32m+[m[32m            "attributes": {[m
[32m+[m[32m                "content": "What are you interested in?",[m
[32m+[m[32m                "style": {[m
[32m+[m[32m                    "type": "titleLarge",[m
[32m+[m[32m                    "color": "black"[m
[32m+[m[32m                }[m
[32m+[m[32m            }[m
[32m+[m[32m        }[m
[32m+[m[32m    """.parseJson()[m
 [m
     MaterialTheme {[m
         RenderText(component = testComponent)[m
[1mdiff --git a/ui/src/main/java/com/sacada/ui/ui/renderers/RenderTextField.kt b/ui/src/main/java/com/sacada/ui/ui/renderers/RenderTextField.kt[m
[1mindex 96a1147..34e58d2 100644[m
[1m--- a/ui/src/main/java/com/sacada/ui/ui/renderers/RenderTextField.kt[m
[1m+++ b/ui/src/main/java/com/sacada/ui/ui/renderers/RenderTextField.kt[m
[36m@@ -10,30 +10,47 @@[m [mimport androidx.compose.runtime.mutableStateOf[m
 import androidx.compose.runtime.remember[m
 import androidx.compose.ui.tooling.preview.Preview[m
 import com.sacada.core.util.getStringAttribute[m
[31m-import kotlinx.serialization.json.JsonPrimitive[m
[32m+[m[32mimport com.sacada.core.util.isValid[m
[32m+[m[32mimport com.sacada.ui.ui.screen.LocalScreenViewModel[m
[32m+[m[32mimport com.sacada.ui.util.parseJson[m
 [m
 @Composable[m
 fun RenderTextField(component: ViewComponent) {[m
[32m+[m[32m    val viewModel = LocalScreenViewModel.current[m
     val textValue = remember { mutableStateOf("") }[m
[32m+[m[32m    val isValid = remember { mutableStateOf(component.isValid("")) }[m
[32m+[m
     Column {[m
         Text(text = component.getStringAttribute("label"))[m
         TextField([m
             placeholder = { Text(text = component.getStringAttribute("placeholder")) },[m
             value = textValue.value,[m
[31m-            onValueChange = { textValue.value = it }[m
[31m-        )[m
[32m+[m[32m            isError = !isValid.value,[m
[32m+[m[32m            onValueChange = {[m
[32m+[m[32m                textValue.value = it[m
[32m+[m[32m                isValid.value = component.isValid(it)[m
[32m+[m[32m                viewModel.updateComponentState(component.id, isValid.value)[m
[32m+[m[32m            })[m
     }[m
 }[m
 [m
 @Preview(showBackground = true)[m
 @Composable[m
 fun PreviewRenderTextField() {[m
[31m-    val testComponent = ViewComponent([m
[31m-        type = "TextField",[m
[31m-        attributes = mapOf([m
[31m-            "placeholder" to JsonPrimitive("Digite seu nome")[m
[31m-        )[m
[31m-    )[m
[32m+[m[32m    val testComponent = """[m
[32m+[m[32m        {[m
[32m+[m[32m          "id": "usernameField",[m
[32m+[m[32m          "type": "TextField",[m
[32m+[m[32m          "attributes": {[m
[32m+[m[32m            "placeholder": "Enter your username",[m
[32m+[m[32m            "validation": {[m
[32m+[m[32m              "required": true,[m
[32m+[m[32m              "minLength": 5,[m
[32m+[m[32m              "regex": "^[a-zA-Z0-9_]*${'$'}"[m
[32m+[m[32m            }[m
[32m+[m[32m          }[m
[32m+[m[32m        }[m
[32m+[m[32m    """.parseJson()[m
 [m
     MaterialTheme {[m
         RenderTextField(component = testComponent)[m
[1mdiff --git a/ui/src/main/java/com/sacada/ui/ui/screen/RenderScreen.kt b/ui/src/main/java/com/sacada/ui/ui/screen/RenderScreen.kt[m
[1mindex b174f8d..07ca0de 100644[m
[1m--- a/ui/src/main/java/com/sacada/ui/ui/screen/RenderScreen.kt[m
[1m+++ b/ui/src/main/java/com/sacada/ui/ui/screen/RenderScreen.kt[m
[36m@@ -6,29 +6,40 @@[m [mimport androidx.compose.foundation.layout.fillMaxSize[m
 import androidx.compose.foundation.layout.padding[m
 import androidx.compose.material3.Scaffold[m
 import androidx.compose.runtime.Composable[m
[32m+[m[32mimport androidx.compose.runtime.CompositionLocalProvider[m
[32m+[m[32mimport androidx.compose.runtime.collectAsState[m
[32m+[m[32mimport androidx.compose.runtime.compositionLocalOf[m
[32m+[m[32mimport androidx.compose.runtime.getValue[m
 import androidx.compose.ui.Modifier[m
 import androidx.hilt.navigation.compose.hiltViewModel[m
 import com.sacada.ui.ui.renderers.RenderBottomBar[m
 import com.sacada.ui.ui.renderers.RenderComponent[m
 import com.sacada.ui.ui.renderers.RenderTopBar[m
 [m
[32m+[m[32mval LocalScreenViewModel = compositionLocalOf<ScreenViewModel> {[m
[32m+[m[32m    error("ScreenViewModel not provided")[m
[32m+[m[32m}[m
[32m+[m
 @Composable[m
 fun RenderScreen(screen: ViewScreen, viewModel: ScreenViewModel = hiltViewModel()) {[m
[31m-    Scaffold([m
[31m-        modifier = Modifier.fillMaxSize(),[m
[31m-        topBar = {[m
[31m-            screen.topBar?.let { RenderTopBar(it) }[m
[31m-        },[m
[31m-        bottomBar = {[m
[31m-            screen.bottomBar?.let { RenderBottomBar(it) }[m
[31m-        }[m
[31m-    ) { innerPadding ->[m
[31m-        Column([m
[31m-            modifier = Modifier[m
[31m-                .padding(innerPadding)[m
[31m-                .fillMaxSize()[m
[31m-        ) {[m
[31m-            screen.layout?.let { RenderComponent(it) }[m
[32m+[m
[32m+[m[32m    CompositionLocalProvider(LocalScreenViewModel provides viewModel) {[m
[32m+[m[32m        Scaffold([m
[32m+[m[32m            modifier = Modifier.fillMaxSize(),[m
[32m+[m[32m            topBar = {[m
[32m+[m[32m                screen.topBar?.let { RenderTopBar(it) }[m
[32m+[m[32m            },[m
[32m+[m[32m            bottomBar = {[m
[32m+[m[32m                screen.bottomBar?.let { RenderBottomBar(it) }[m
[32m+[m[32m            }[m
[32m+[m[32m        ) { innerPadding ->[m
[32m+[m[32m            Column([m
[32m+[m[32m                modifier = Modifier[m
[32m+[m[32m                    .padding(innerPadding)[m
[32m+[m[32m                    .fillMaxSize()[m
[32m+[m[32m            ) {[m
[32m+[m[32m                screen.layout?.let { RenderComponent(it) }[m
[32m+[m[32m            }[m
         }[m
     }[m
 }[m
[1mdiff --git a/ui/src/main/java/com/sacada/ui/ui/screen/ScreenViewModel.kt b/ui/src/main/java/com/sacada/ui/ui/screen/ScreenViewModel.kt[m
[1mindex 4065fa2..ca502d1 100644[m
[1m--- a/ui/src/main/java/com/sacada/ui/ui/screen/ScreenViewModel.kt[m
[1m+++ b/ui/src/main/java/com/sacada/ui/ui/screen/ScreenViewModel.kt[m
[36m@@ -1,9 +1,13 @@[m
 package com.sacada.ui.ui.screen[m
 [m
 import androidx.lifecycle.ViewModel[m
[32m+[m[32mimport androidx.lifecycle.viewModelScope[m
 import dagger.hilt.android.lifecycle.HiltViewModel[m
 import kotlinx.coroutines.flow.MutableStateFlow[m
[32m+[m[32mimport kotlinx.coroutines.flow.SharingStarted[m
 import kotlinx.coroutines.flow.StateFlow[m
[32m+[m[32mimport kotlinx.coroutines.flow.map[m
[32m+[m[32mimport kotlinx.coroutines.flow.stateIn[m
 import javax.inject.Inject[m
 [m
 @HiltViewModel[m
[36m@@ -17,7 +21,11 @@[m [mclass ScreenViewModel @Inject constructor() : ViewModel() {[m
         }[m
     }[m
 [m
[31m-    fun areAllComponentsValid(): Boolean {[m
[31m-        return _componentStates.value.values.all { it }[m
[31m-    }[m
[32m+[m[32m    val areAllComponentsValid: StateFlow<Boolean> = _componentStates[m
[32m+[m[32m        .map { states -> states.values.all { it } }[m
[32m+[m[32m        .stateIn([m
[32m+[m[32m            viewModelScope,[m
[32m+[m[32m            SharingStarted.Eagerly,[m
[32m+[m[32m            true[m
[32m+[m[32m        )[m
 }[m
\ No newline at end of file[m
[1mdiff --git a/ui/src/main/java/com/sacada/ui/util/Extensions.kt b/ui/src/main/java/com/sacada/ui/util/Extensions.kt[m
[1mindex f384665..031117e 100644[m
[1m--- a/ui/src/main/java/com/sacada/ui/util/Extensions.kt[m
[1m+++ b/ui/src/main/java/com/sacada/ui/util/Extensions.kt[m
[36m@@ -1,20 +1,25 @@[m
 package com.sacada.ui.util[m
 [m
[31m-import androidx.compose.ui.unit.Dp[m
[31m-import androidx.compose.ui.unit.dp[m
 import ViewComponent[m
 import androidx.compose.material3.MaterialTheme[m
 import androidx.compose.runtime.Composable[m
 import androidx.compose.ui.text.TextStyle[m
[32m+[m[32mimport androidx.compose.ui.unit.Dp[m
[32m+[m[32mimport androidx.compose.ui.unit.dp[m
 import com.sacada.core.util.getStringAttribute[m
[32m+[m[32mimport com.sacada.core.util.getSubAttributes[m
[32m+[m[32mimport kotlinx.serialization.json.Json[m
[32m+[m[32mimport kotlinx.serialization.json.contentOrNull[m
[32m+[m[32mimport kotlinx.serialization.json.jsonPrimitive[m
 [m
 fun ViewComponent.getPadding(): Dp {[m
     return this.getStringAttribute("padding").toIntOrNull()?.dp ?: 0.dp[m
 }[m
 [m
 @Composable[m
[31m-fun ViewComponent.getTextStyle(): TextStyle {[m
[31m-    return when (this.getStringAttribute("style")) {[m
[32m+[m[32mfun ViewComponent.getTextStyle(group: String = "style"): TextStyle {[m
[32m+[m[32m    val styleName = getSubAttributes(group)?.get("type")?.jsonPrimitive?.contentOrNull[m
[32m+[m[32m    return when (styleName) {[m
         "displayLarge" -> MaterialTheme.typography.displayLarge[m
         "displayMedium" -> MaterialTheme.typography.displayMedium[m
         "displaySmall" -> MaterialTheme.typography.displaySmall[m
[36m@@ -32,4 +37,8 @@[m [mfun ViewComponent.getTextStyle(): TextStyle {[m
         "labelSmall" -> MaterialTheme.typography.labelSmall[m
         else -> MaterialTheme.typography.bodyMedium[m
     }[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfun String.parseJson(): ViewComponent {[m
[32m+[m[32m    return Json.decodeFromString(this)[m
 }[m
\ No newline at end of file[m
